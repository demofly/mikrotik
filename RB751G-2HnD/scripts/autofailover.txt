:local timeout 30
:local spentTime 0
:local spentTimeOnURL 0
:local tgAPIURLforText "https://api.telegram.org/bot123BotNumberHere:YourTokenHere/sendMessage\3Fchat_id=123YourChatIdHere&text="
:local myExternalIP ""

# tunnels
:local vpns { 
    "ovpn-vpn01"
}

# 2 WAN interfaces with DHCP client active
:local int1name "WAN-Port5"
:local int2name "WAN-Port4"

# Suppose what we need to switch
:local intToEnable  $int2name
:local intToDisable $int1name

# Uplink targets for potential switching
:if ( ( [/interface ethernet get $intToDisable disabled] = true ) \
   || ( [/interface ethernet get $intToEnable disabled] = false ) \
) do={
    # Just swap our supposition which was set before
    :set intToEnable  $int1name
    :set intToDisable $int2name
}

# Get gateway IP
#:local gatewayIP [:ip dhcp-client get [find interface=$intToDisable] gateway]

# Check whether Internet is available
:local needINET ( \
     ([:ping 192.5.5.241 interval=1 count=1]=0) \
  && ([:ping 1.1.1.1     interval=1 count=1]=0) \
  && ([:ping 8.8.8.8     interval=1 count=1]=0) \
)

:if ( $needINET = true ) do={ 
  # Start the failover
  :log info "AF: Internet is not available"

  # Shut down VPNs to avoid hanging routes
  :foreach vpn in=$vpns do={ :interface ovpn-client set $vpn disabled=yes }
  :log info "AF: stopped VPNs"

  # Switch uplink interfaces
  :interface ethernet set [:interface ethernet find name=$intToDisable] disabled=yes
  :interface ethernet set [:interface ethernet find name=$intToEnable]  disabled=no
  :log info "AF: Interface $intToEnable was activated"

  # Wait for the uplink is ready
  :set spentTime 0
  :while ( ( $spentTime < $timeout ) \
    && ( ( [:len [:ip dhcp-client get $intToEnable address] ] = 0 ) \ 
        || ( [:interface ethernet get $intToEnable running] = false ) \
    ) \
  ) do={
    :delay 1s;
    :set spentTime ($spentTime + 1)
  }
  :log info "AF: Spent $spentTime seconds to get $intToEnable online."

  # Uplink is online, so get our VPNs back
  :log info "AF: Starting VPNs."
  :foreach vpn in=$vpns do={ :interface ovpn-client set $vpn disabled=no }

  # Get our new public source IP
  :set spentTimeOnURL 0
  :while ( ( $spentTimeOnURL < $timeout ) && ( $myExternalIP = "" ) ) do={
    :set myExternalIP ([:tool fetch mode=http output=user url="http://whatismyip.akamai.com" as-value]->"data")
    :delay 1s;
    :set spentTimeOnURL ($spentTimeOnURL + 1)
  }
  :log info "AF: External IP is $myExternalIP"

  # Telegram notification
  :local localIP [:ip address get [:ip address find interface=$intToEnable] address]
  :local tgURLwithText ($tgAPIURLforText."Switched uplink to: $intToEnable%0AInterface address: $localIP%0AInterface activation took: $spentTime seconds%0APublic source IP is: $myExternalIP")
  :tool fetch keep-result=no url=$tgURLwithText
  :log info "AF: Requested the URL: $tgURLwithText"
}

